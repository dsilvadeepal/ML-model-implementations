sw_seen_fan[,2:8] = lapply(sw_seen_fan[,2:8], as.factor)
str(sw_seen_fan)
summary(sw_seen_fan)
library(fivethirtyeight)
library(tidyverse)
library(janitor)
URL<-"https://raw.githubusercontent.com/fivethirtyeight/data/master/star-wars-survey/StarWars.csv"
raw_data<-read.csv(URL, stringsAsFactors = FALSE,header = TRUE) %>%
clean_names() %>%
mutate(respondent_id=as.character(respondent_id))
sw_seen_fan <- subset(raw_data[-1, c(1,2,3,34,35,36,37,38)])
names(sw_seen_fan) <- c("id", "seen", "fan", "gender", "age", "income", "edu", "region")
sw_seen_fan[,2:8] = lapply(sw_seen_fan[,2:8], as.factor)
str(sw_seen_fan)
summary(sw_seen_fan)
install.packages("ggmap")
library(ggmap)
world_map <- borders("world", color = "gray50", fill = "gray50")
mp <- ggplot() + world_map
ggplot(sw_seen_fan, aes(x = fan))
ggplot(sw_seen_fan, aes(x = fan)) +
geom_histogram(aes(fill = gender))
ggplot(sw_seen_fan, aes(x = fan), stat = count) +
geom_histogram(aes(fill = gender))
ggplot(sw_seen_fan, aes(x = fan), stat = "count") +
geom_histogram(aes(fill = gender))
ggplot(sw_seen_fan, aes(x = fan)) +
geom_histogram(aes(fill = gender))
ggplot(sw_seen_fan, aes(x = id)) +
geom_histogram(aes(fill = gender))
ggplot(sw_seen_fan, aes(x = fan)) +
geom_bar(aes(fill = gender))
ggplot(sw_seen_fan, aes(x = age)) +
geom_bar(aes(fill = gender)) +
facet_grid(~fan)
ggplot(sw_seen_fan, aes(x = age)) +
geom_bar(aes(fill = gender)) +
facet_grid(~fan)
ggplot(sw_seen_fan, aes(x = age)) +
geom_bar(aes(fill = gender)) +
facet_grid(~seen)
sw_seen_fan <- subset(raw_data[-1, c(1,2,3,34,35,36,37,38)]) %>%
filter("have_you_seen_any_of_the_6_films_in_the_star_wars_franchise" == "Yes")
summary(sw_seen_fan)
sw_seen_fan <- subset(raw_data[-1, c(1,2,3,34,35,36,37,38)]) %>%
filter(have_you_seen_any_of_the_6_films_in_the_star_wars_franchise == "Yes")
summary(sw_seen_fan)
ggplot(sw_seen_fan, aes(x = age)) +
geom_bar(aes(fill = gender)) +
facet_grid(~seen) +
ggtitle("")
ggplot(sw_seen_fan, aes(x = age)) +
geom_bar(aes(fill = gender)) +
ggtitle("Temp")
ggplot(sw_seen_fan, aes(x = age)) +
geom_bar(aes(fill = gender)) +
facet_grid(~region)
ggplot(sw_seen_fan, aes(x = age)) +
geom_bar(aes(fill = gender)) +
facet_grid(~region) +
ggtitle("Temp")
) +
ggplot(sw_seen_fan, aes(x = age)) +
geom_bar(aes(fill = gender)) +
facet_grid(~fan) +
ggtitle("Temp")
ggplot(sw_seen_fan, aes(x = fan)) +
geom_bar(aes(fill = gender)) +
facet_grid(~age) +
ggtitle("Temp")
names(sw_seen_fan) <- c("id", "seen", "fan", "gender", "age", "income", "edu", "region")
library(fivethirtyeight)
library(tidyverse)
library(janitor)
library(ggmap)
URL<-"https://raw.githubusercontent.com/fivethirtyeight/data/master/star-wars-survey/StarWars.csv"
raw_data<-read.csv(URL, stringsAsFactors = FALSE,header = TRUE) %>%
clean_names() %>%
mutate(respondent_id=as.character(respondent_id))
sw_seen_fan <- subset(raw_data[-1, c(1,2,3,34,35,36,37,38)]) %>%
filter(have_you_seen_any_of_the_6_films_in_the_star_wars_franchise == "Yes")
names(sw_seen_fan) <- c("id", "seen", "fan", "gender", "age", "income", "edu", "region")
sw_seen_fan[,2:8] = lapply(sw_seen_fan[,2:8], as.factor)
str(sw_seen_fan)
summary(sw_seen_fan)
ggplot(sw_seen_fan, aes(x = fan)) +
geom_bar(aes(fill = gender)) +
facet_grid(~age) +
ggtitle("Temp")
install.packages("alphavantager")
library(alphavantager)
av_api_key("FLV07W0J6TMRJCYV")
av_get(symbol = "BZUN", av_fun = "TIME_SERIES_DAILY_ADJUSTED", outputsize = "full", datatype = "csv")
Baozun <-  av_get(symbol = "BZUN", av_fun = "TIME_SERIES_DAILY_ADJUSTED", outputsize = "full", datatype = "csv")
summary(Baozun)
library(caTools)
split = sample.split(Baozun$adjusted_close, SplitRatio = 0.8)
training_set = subset(Baozun, split == TRUE)
test_set = subset(Baozun, split == FALSE)
regressor = lm(formula = adjusted_close ~ .,
data = training_set)
y_pred = predict(regressor, newdata = test_set)
y_pred
View(test_set)
View(test_set)
summary(regressor)
regressor = lm(formula = adjusted_close ~ timestamp +open + close + high + low+ volume,
data = training_set)
summary(regressor)
y_pred = predict(regressor, newdata = test_set)
y_pred
regressor = lm(formula = adjusted_close ~ timestamp +open + close + high + low+ volume,
data = Baozun)
summary(regressor)
regressor = lm(formula = adjusted_close ~ timestamp +open +low + close + high  + volume,
data = Baozun)
summary(regressor)
regressor = lm(formula = adjusted_close ~ timestamp +low + close + high  + volume,
data = Baozun)
summary(regressor)
regressor = lm(formula = adjusted_close ~ low + close + high  + volume,
data = Baozun)
summary(regressor)
regressor = lm(formula = adjusted_close ~ close + high  + volume,
data = Baozun)
summary(regressor)
regressor = lm(formula = adjusted_close ~ close + high ,
data = Baozun)
summary(regressor)
regressor = lm(formula = adjusted_close ~ close,
data = Baozun)
summary(regressor)
candleChart(Baozun, up.col = "black", dn.col = "red", theme = "white")
install.packages("quantmod")
library(quantmod)
candleChart(Baozun, up.col = "black", dn.col = "red", theme = "white")
regressor = lm(formula = adjusted_close ~ close,
data = Baozun)
summary(regressor)
split = sample.split(Baozun$close, SplitRatio = 0.8)
training_set = subset(Baozun, split == TRUE)
test_set = subset(Baozun, split == FALSE)
regressor = lm(formula = close ~ timestamp + open + high + low + volume,
data = training_set)
summary(regressor)
regressor = lm(formula = close ~ timestamp + open + high + low,
data = training_set)
summary(regressor)
regressor = lm(formula = close ~ open + high + low,
data = training_set)
summary(regressor)
y_pred = predict(regressor, newdata = test_set)
View(test_set)
y_pred
setwd("C:/Users/dsilv/Desktop/Learning/Data Science/ML-model-implementations/SVM")
library(ggplot2)
iris<-read.csv("Iris.csv")
str(iris_data)
str(iris)
summary(iris)
View(iris)
Species_new <- iris$Species
Species_new <- gsub("Iris-", "", Species_new)
iris$Species <- Species_new
iris$Id <- NULL
names(iris)[1] <-"Sepal.Length"
names(iris)[2] <-"Sepal.Width"
names(iris)[3] <-"Petal.Length"
names(iris)[4] <-"Petal.Width"
View(iris)
set.seed(123)
library(caTools)
#Split the dataset into Training & Test data
iris$spl=sample.split(iris,SplitRatio=0.7)
train=subset(iris, iris$spl==TRUE)
test = subset(iris, iris$spl == FALSE)
library(e1071)  # for svm
#Split the dataset into Training & Test data
set.seed(123)
model <- svm(Species ~ ., iris, kernel = "radial", cost = 2, gamma = 0.1)
model <- svm(Species ~ ., train, kernel = "radial", cost = 2, gamma = 0.1)
result<-svm(species~.,train,
kernel="radial",cost=2,gamma=.1)
result<-svm(Species~.,train,
kernel="radial",cost=2,gamma=.1)
dim(train)
result<-svm(species~petallengthcm+petalwidthcm,
iris,kernel="radial",gamma=10)
result<-svm(Species~petallengthcm+petalwidthcm,
iris,kernel="radial",gamma=10)
result<-svm(Species~.,
iris,kernel="radial",gamma=10)
View(test)
model <- svm(Species ~ ., train[-spl], kernel = "radial", cost = 2, gamma = 0.1)
model <- svm(Species ~ ., train[:-spl], kernel = "radial", cost = 2, gamma = 0.1)
model <- svm(Species ~ ., train[,-spl], kernel = "radial", cost = 2, gamma = 0.1)
model <- svm(Species ~ ., train[ ,1:5], kernel = "radial", cost = 2, gamma = 0.1)
model <- svm(Species ~ ., train[ ,1:4], kernel = "radial", cost = 2, gamma = 0.1)
model <- svm(Species ~ ., train[-spl], kernel = "radial", cost = 2, gamma = 0.1)
n <- nrow(iris)
shuffled <- iris[sample(n),]
View(shuffled)
dim(shuffled)
train <- shuffled[1:round(0.7 * n),]
test <- shuffled[(round(0.7 * n) + 1):n,]
set.seed(123)
n <- nrow(iris)
shuffled <- iris[sample(n),]
dim(shuffled)
train <- shuffled[1:round(0.7 * n),]
test <- shuffled[(round(0.7 * n) + 1):n,]
#SVM Model
model <- svm(Species ~ ., train, kernel = "radial", cost = 2, gamma = 0.1)
setwd("C:/Users/dsilv/Desktop/Learning/Data Science/ML-model-implementations/SVM")
library(ggplot2)
library(caTools)
library(e1071)  # for svm
iris<-read.csv("Iris.csv")
str(iris)
summary(iris)
#Some minor tidying up
Species_new <- iris$Species
Species_new <- gsub("Iris-", "", Species_new)
iris$Species <- Species_new
iris$Id <- NULL
#Split the dataset into Training & Test data
set.seed(123)
n <- nrow(iris)
shuffled <- iris[sample(n),]
dim(shuffled)
train <- shuffled[1:round(0.7 * n),]
test <- shuffled[(round(0.7 * n) + 1):n,]
#SVM Model
model <- svm(Species ~ ., train, kernel = "radial", cost = 2, gamma = 0.1)
#SVM Model
model <- svm(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, train, kernel = "radial", cost = 2, gamma = 0.1)
View(train)
setwd("C:/Users/dsilv/Desktop/Learning/Data Science/ML-model-implementations/SVM")
library(ggplot2)
library(caTools)
library(e1071)  # for svm
iris<-read.csv("Iris.csv")
str(iris)
summary(iris)
#Some minor tidying up
Species_new <- iris$Species
Species_new <- gsub("Iris-", "", Species_new)
iris$Species <- Species_new
iris$Id <- NULL
names(iris)[1] <-"Sepal.Length"
names(iris)[2] <-"Sepal.Width"
names(iris)[3] <-"Petal.Length"
names(iris)[4] <-"Petal.Width"
#Split the dataset into Training & Test data
set.seed(123)
n <- nrow(iris)
shuffled <- iris[sample(n),]
dim(shuffled)
train <- shuffled[1:round(0.7 * n),]
test <- shuffled[(round(0.7 * n) + 1):n,]
#SVM Model
model <- svm(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, train, kernel = "radial", cost = 2, gamma = 0.1)
summary(train)
setwd("C:/Users/dsilv/Desktop/Learning/Data Science/ML-model-implementations/SVM")
library(ggplot2)
library(caTools)
library(e1071)  # for svm
iris<-read.csv("Iris.csv")[,-1]
str(iris)
summary(iris)
names(iris)<-tolower(names(iris))
#Split the dataset into Training & Test data
set.seed(123)
n <- nrow(iris)
shuffled <- iris[sample(n),]
dim(shuffled)
train <- shuffled[1:round(0.7 * n),]
test <- shuffled[(round(0.7 * n) + 1):n,]
#SVM Model
model <- svm(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width,
train, kernel = "radial", cost = 2, gamma = 0.1)
View(iris)
setwd("C:/Users/dsilv/Desktop/Learning/Data Science/ML-model-implementations/SVM")
library(ggplot2)
library(caTools)
library(e1071)  # for svm
iris<-read.csv("Iris.csv")[,-1]
str(iris)
summary(iris)
names(iris)<-tolower(names(iris))
#Split the dataset into Training & Test data
set.seed(123)
n <- nrow(iris)
shuffled <- iris[sample(n),]
dim(shuffled)
train <- shuffled[1:round(0.7 * n),]
test <- shuffled[(round(0.7 * n) + 1):n,]
#SVM Model
model <- svm(species ~ .,
train, kernel = "radial", cost = 2, gamma = 0.1)
View(iris)
a<-tune("svm",species~.,data=iris,
kernel="radial",                           #set the kernel as radial
tunecontrol = tune.control(cross = 10),    #10-fold cross-validation
ranges=list(cost=c(2^c(-3:3)),             #set cost and gamma
gamma=c(10^c(-3:3))))
summary(a)
b<-table(predict(result,test),test$species)
b<-table(predict(model,test),test$species)
sum(diag(b))/sum(b)
model <- svm(species ~ .,
train, kernel = "radial", cost = 4, gamma = 0.1)
b<-table(predict(model,test),test$species)
sum(diag(b))/sum(b)
setwd("C:/Users/dsilv/Desktop/Learning/Data Science/ML-model-implementations/SVM")
library(ggplot2)
library(caTools)
library(e1071)  # for svm
#Import Data
iris<-read.csv("Iris.csv")[,-1]   #drop the column with ids
#Review the data
str(iris)
summary(iris)
#Standardize column names
names(iris)<-tolower(names(iris))
#Split the dataset into Training & Test data
set.seed(123)
n <- nrow(iris)
shuffled <- iris[sample(n),]
dim(shuffled)
train <- shuffled[1:round(0.7 * n),]
test <- shuffled[(round(0.7 * n) + 1):n,]
a<-tune("svm",species~.,data=iris,
kernel="radial",                           #set the kernel as radial
tunecontrol = tune.control(cross = 10),    #10-fold cross-validation
ranges=list(cost=c(2^c(-3:3)),             #set cost and gamma
gamma=c(10^c(-3:3))))
summary(a)
model <- svm(species ~ .,
train, kernel = "radial", cost = 4, gamma = 0.1)
b<-table(predict(model,test),test$species)
sum(diag(b))/sum(b)
a<-tune("svm",species~.,data=iris,
kernel="radial",                           #set the kernel as radial
tunecontrol = tune.control(cross = 15),    #10-fold cross-validation
ranges=list(cost=c(2^c(-3:3)),             #set cost and gamma
gamma=c(10^c(-3:3))))
summary(a)
#SVM Model
model <- svm(species ~ .,
train, kernel = "radial", cost = 8, gamma = 0.1)
b<-table(predict(model,test),test$species)
sum(diag(b))/sum(b)
a<-tune("svm",species~.,data=iris,
kernel="radial",                           #set the kernel as radial
tunecontrol = tune.control(cross = 10),    #10-fold cross-validation
ranges=list(cost=c(2^c(-5:5)),             #set cost and gamma
gamma=c(10^c(-3:3))))
summary(a)
#SVM Model
model <- svm(species ~ .,
train, kernel = "radial", cost = 2, gamma = 0.1)
b<-table(predict(model,test),test$species)
sum(diag(b))/sum(b)
a<-tune("svm",species~.,data=iris,
kernel="radial",                           #set the kernel as radial
tunecontrol = tune.control(cross = 10),    #10-fold cross-validation
ranges=list(cost=c(2^c(-5:10)),             #set cost and gamma
gamma=c(10^c(-3:3))))
summary(a)
#SVM Model
model <- svm(species ~ .,
train, kernel = "radial", cost = 128, gamma = 0.001)
b<-table(predict(model,test),test$species)
sum(diag(b))/sum(b)
a<-tune("svm",species~.,data=iris,
kernel="radial",                           #set the kernel as radial
tunecontrol = tune.control(cross = 10),    #10-fold cross-validation
ranges=list(cost=c(2^c(-5:5)),             #set cost and gamma
gamma=c(10^c(-5:5))))
summary(a)
model <- svm(species ~ .,
train, kernel = "radial", cost = 2, gamma = 0.01)
b<-table(predict(model,test),test$species)
sum(diag(b))/sum(b)
model <- svm(species ~ .,
train, kernel = "radial", cost = 2, gamma = 0.1)
b<-table(predict(model,test),test$species)
sum(diag(b))/sum(b)
model <- svm(species ~ .,
train, kernel = "radial", cost = 2, gamma = 1)
b<-table(predict(model,test),test$species)
sum(diag(b))/sum(b)
model <- svm(species ~ .,
train, kernel = "radial", cost = 2, gamma = .05)
b<-table(predict(model,test),test$species)
sum(diag(b))/sum(b)
#SVM Model
model <- svm(species ~ .,
train, kernel = "radial", cost = 2, gamma = .5)
b<-table(predict(model,test),test$species)
sum(diag(b))/sum(b)
#SVM Model
model <- svm(species ~ .,
train, kernel = "radial", cost = 2, gamma = .1)
b<-table(predict(model,test),test$species)
sum(diag(b))/sum(b)
model <- svm(species ~ .,
train, kernel = "radial", cost = 2.5, gamma = .1)
b<-table(predict(model,test),test$species)
sum(diag(b))/sum(b)
model <- svm(species ~ .,
train, kernel = "radial", cost = 2.5, gamma = .1)
b<-table(predict(model,test),test$species)
sum(diag(b))/sum(b)
model <- svm(species ~ .,
train, kernel = "radial", cost = 1, gamma = .1)
b<-table(predict(model,test),test$species)
sum(diag(b))/sum(b)
model <- svm(species ~ .,
train, kernel = "radial", cost = 1.5, gamma = .1)
b<-table(predict(model,test),test$species)
sum(diag(b))/sum(b)
model <- svm(species ~ .,
train, kernel = "radial", cost = 2.2, gamma = .1)
b<-table(predict(model,test),test$species)
sum(diag(b))/sum(b)
model <- svm(species ~ .,
train, kernel = "radial", cost = 2, gamma = .1)
b<-table(predict(model,test),test$species)
sum(diag(b))/sum(b)
a<-tune("svm",species~.,data=iris,
kernel="radial",                           #set the kernel as radial
tunecontrol = tune.control(cross = 10),    #10-fold cross-validation
ranges=list(cost=c(2^c(-5:5)),             #set cost and gamma
gamma=c(10^c(-5:5))))
summary(a)
a<-tune("svm",species~.,data=iris,
kernel="radial",                           #set the kernel as radial
tunecontrol = tune.control(cross = 10),    #10-fold cross-validation
ranges=list(cost=c(2^c(-5:5)),             #set cost and gamma
gamma=c(10^c(-5:5))))
summary(a)
#Tune the model
a<-tune("svm",species~.,data=iris,
kernel="radial",                           #set the kernel as radial
tunecontrol = tune.control(cross = 10),    #10-fold cross-validation
ranges=list(cost=c(2^c(-5:5)),             #set cost and gamma
gamma=c(10^c(-3:3))))
summary(a)
a<-tune("svm",species~.,data=iris,
kernel="radial",                           #set the kernel as radial
tunecontrol = tune.control(cross = 10),    #10-fold cross-validation
ranges=list(cost=c(2^c(-5:5)),             #set cost and gamma
gamma=c(10^c(-2:2))))
summary(a)
a<-tune("svm",species~.,data=iris,
kernel="radial",                           #set the kernel as radial
tunecontrol = tune.control(cross = 10),    #10-fold cross-validation
ranges=list(cost=c(2^c(-5:5)),             #set cost and gamma
gamma=c(10^c(-2:2))))
summary(a)
model <- svm(species ~ .,
train, kernel = "radial", cost = 2, gamma = .1)
predictions<-table(predict(model,test),test$species)
sum(diag(predictions))/sum(predictions)
plot(model, iris)
m2 <- svm(Species~., data = iris)
plot(m2, iris, Petal.Width ~ Petal.Length,
slice = list(Sepal.Width = 3, Sepal.Length = 4))
plot(model, iris, Petal.Width ~ Petal.Length,
slice = list(Sepal.Width = 3, Sepal.Length = 4))
summary(iris)
plot(model, iris, petalwidthcm  ~ petallengthcm,
slice = list(sepalwidthcm = 3, sepallengthcm = 4))
model <- svm(species ~ .,
train, kernel = "radial", cost = 2, gamma = .3)
predictions<-table(predict(model,test),test$species)
sum(diag(predictions))/sum(predictions)
plot(model, iris, petalwidthcm  ~ petallengthcm,
slice = list(sepalwidthcm = 3, sepallengthcm = 4))
model <- svm(species ~ .,
train, kernel = "radial", cost = 2, gamma = .2)
predictions<-table(predict(model,test),test$species)
sum(diag(predictions))/sum(predictions)
plot(model, iris, petalwidthcm  ~ petallengthcm,
slice = list(sepalwidthcm = 3, sepallengthcm = 4))
model <- svm(species ~ .,
train, kernel = "radial", cost = 2, gamma = .05)
predictions<-table(predict(model,test),test$species)
sum(diag(predictions))/sum(predictions)
plot(model, iris, petalwidthcm  ~ petallengthcm,
slice = list(sepalwidthcm = 3, sepallengthcm = 4))
model <- svm(species ~ .,
train, kernel = "radial", cost = 2, gamma = .1)
predictions<-table(predict(model,test),test$species)
sum(diag(predictions))/sum(predictions)
plot(model, iris, petalwidthcm  ~ petallengthcm,
slice = list(sepalwidthcm = 3, sepallengthcm = 4))
#SVM Model
model <- svm(species ~ .,
train, kernel = "radial", cost = 2, gamma = 1)
predictions<-table(predict(model,test),test$species)
sum(diag(predictions))/sum(predictions)
plot(model, iris, petalwidthcm  ~ petallengthcm,
slice = list(sepalwidthcm = 3, sepallengthcm = 4))
model <- svm(species ~ .,
train, kernel = "radial", cost = 2, gamma = .1)
predictions<-table(predict(model,test),test$species)
sum(diag(predictions))/sum(predictions)
plot(model, iris, petalwidthcm  ~ petallengthcm,
slice = list(sepalwidthcm = 3, sepallengthcm = 4))
